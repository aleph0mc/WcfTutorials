//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsClient.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProduct")]
    public interface IProduct {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProduct/AddCategory", ReplyAction="http://tempuri.org/IProduct/AddCategoryResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Mandatory)]
        int AddCategory(string CategoryName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IProduct/AddCategory", ReplyAction="http://tempuri.org/IProduct/AddCategoryResponse")]
        System.IAsyncResult BeginAddCategory(string CategoryName, System.AsyncCallback callback, object asyncState);
        
        int EndAddCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProduct/AddProduct", ReplyAction="http://tempuri.org/IProduct/AddProductResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Mandatory)]
        int AddProduct(int CategoryID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IProduct/AddProduct", ReplyAction="http://tempuri.org/IProduct/AddProductResponse")]
        System.IAsyncResult BeginAddProduct(int CategoryID, System.AsyncCallback callback, object asyncState);
        
        int EndAddProduct(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductChannel : WindowsClient.ProductServiceReference.IProduct, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductClient : System.ServiceModel.ClientBase<WindowsClient.ProductServiceReference.IProduct>, WindowsClient.ProductServiceReference.IProduct {
        
        private BeginOperationDelegate onBeginAddCategoryDelegate;
        
        private EndOperationDelegate onEndAddCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onAddCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddProductDelegate;
        
        private EndOperationDelegate onEndAddProductDelegate;
        
        private System.Threading.SendOrPostCallback onAddProductCompletedDelegate;
        
        public ProductClient() {
        }
        
        public ProductClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddCategoryCompletedEventArgs> AddCategoryCompleted;
        
        public event System.EventHandler<AddProductCompletedEventArgs> AddProductCompleted;
        
        public int AddCategory(string CategoryName) {
            return base.Channel.AddCategory(CategoryName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddCategory(string CategoryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddCategory(CategoryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddCategory(System.IAsyncResult result) {
            return base.Channel.EndAddCategory(result);
        }
        
        private System.IAsyncResult OnBeginAddCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CategoryName = ((string)(inValues[0]));
            return this.BeginAddCategory(CategoryName, callback, asyncState);
        }
        
        private object[] OnEndAddCategory(System.IAsyncResult result) {
            int retVal = this.EndAddCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddCategoryCompleted(object state) {
            if ((this.AddCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCategoryCompleted(this, new AddCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddCategoryAsync(string CategoryName) {
            this.AddCategoryAsync(CategoryName, null);
        }
        
        public void AddCategoryAsync(string CategoryName, object userState) {
            if ((this.onBeginAddCategoryDelegate == null)) {
                this.onBeginAddCategoryDelegate = new BeginOperationDelegate(this.OnBeginAddCategory);
            }
            if ((this.onEndAddCategoryDelegate == null)) {
                this.onEndAddCategoryDelegate = new EndOperationDelegate(this.OnEndAddCategory);
            }
            if ((this.onAddCategoryCompletedDelegate == null)) {
                this.onAddCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginAddCategoryDelegate, new object[] {
                        CategoryName}, this.onEndAddCategoryDelegate, this.onAddCategoryCompletedDelegate, userState);
        }
        
        public int AddProduct(int CategoryID) {
            return base.Channel.AddProduct(CategoryID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddProduct(int CategoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddProduct(CategoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddProduct(System.IAsyncResult result) {
            return base.Channel.EndAddProduct(result);
        }
        
        private System.IAsyncResult OnBeginAddProduct(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int CategoryID = ((int)(inValues[0]));
            return this.BeginAddProduct(CategoryID, callback, asyncState);
        }
        
        private object[] OnEndAddProduct(System.IAsyncResult result) {
            int retVal = this.EndAddProduct(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddProductCompleted(object state) {
            if ((this.AddProductCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddProductCompleted(this, new AddProductCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddProductAsync(int CategoryID) {
            this.AddProductAsync(CategoryID, null);
        }
        
        public void AddProductAsync(int CategoryID, object userState) {
            if ((this.onBeginAddProductDelegate == null)) {
                this.onBeginAddProductDelegate = new BeginOperationDelegate(this.OnBeginAddProduct);
            }
            if ((this.onEndAddProductDelegate == null)) {
                this.onEndAddProductDelegate = new EndOperationDelegate(this.OnEndAddProduct);
            }
            if ((this.onAddProductCompletedDelegate == null)) {
                this.onAddProductCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddProductCompleted);
            }
            base.InvokeAsync(this.onBeginAddProductDelegate, new object[] {
                        CategoryID}, this.onEndAddProductDelegate, this.onAddProductCompletedDelegate, userState);
        }
    }
}
